group 'io.datanerds'
version '1.0-SNAPSHOT'

def grpcVersion = '1.1.2'
def consulClientVersion = '0.13.12'
def slf4jVersion = '1.7.21'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.1"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.google.protobuf'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        compile "io.grpc:grpc-all:${grpcVersion}"
        compile "io.grpc:grpc-core:${grpcVersion}"
        compile "io.grpc:grpc-netty:${grpcVersion}"
        compile "io.grpc:grpc-protobuf:${grpcVersion}"
        compile "io.grpc:grpc-stub:${grpcVersion}"
        compile "com.orbitz.consul:consul-client:${consulClientVersion}"
        compile "org.slf4j:slf4j-api:${slf4jVersion}"

        testCompile "junit:junit:4.12"
        testCompile 'org.hamcrest:hamcrest-library:1.3'
        testCompile 'org.awaitility:awaitility:2.0.0'
        testCompile 'com.pszymczyk.consul:embedded-consul:0.2.3'
    }

    protobuf {
        protoc {
            artifact = 'com.google.protobuf:protoc:3.2.0'
        }
        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
            }
        }
        generateProtoTasks {
            all()*.plugins {
                grpc {
                    option 'enable_deprecated=false'
                }
            }
        }
    }

    sourceSets {
        main {
            proto {
                srcDirs += file("${projectDir}/build/generated/source/proto/main/java");
                srcDirs += file("${projectDir}/build/generated/source/proto/main/grpc");
                srcDirs += file("${projectDir}/build/generated/source/proto/test/java");
                srcDirs += file("${projectDir}/build/generated/source/proto/test/grpc");
            }
        }
    }
}

project(":consulnameresolver") {
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
    }
}
apply plugin: 'io.codearte.nexus-staging'


if (project.hasProperty('staging')) {

    nexusStaging {
        username = ossrhUser
        password = ossrhPassword
    }

    project(":consulnameresolver") {
        apply plugin: 'signing'
        apply plugin: 'maven'

        signing {
            sign configurations.archives
        }

        nexusStaging {
            packageGroup = "io.datanerds"
            stagingProfileId = "36a7a00c49b56"
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUser, password: ossrhPassword)
                    }
                    pom.project {
                        name project.name
                        description project.description
                        packaging 'jar'
                        url 'https://github.com/datanerds-io/ConsulNameResolver'

                        scm {
                            connection 'scm:git:https://github.com/datanerds-io/ConsulNameResolver.git'
                            developerConnection 'scm:git:git@github.com:datanerds-io/ConsulNameResolver.git'
                            url 'https://github.com/datanerds-io/ConsulNameResolver.git'
                        }

                        licenses {
                            license {
                                name 'Eclipse Public License 1.0'
                                url 'https://opensource.org/licenses/EPL-1.0'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id = 'utobi'
                                name = 'Tobias Ullrich'
                                email = 'github-2017@ullrich.io'
                            }
                        }
                    }
                }
            }
        }

    }
}

